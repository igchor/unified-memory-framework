# Builds project (with various compilers, CMake options, etc.) and runs tests
name: BasicBuilds

on: workflow_call

env:
  BUILD_DIR : "${{github.workspace}}/build/"
  INSTL_DIR : "${{github.workspace}}/build/install-dir"
  CI_BRANCH : "${{ github.head_ref || github.ref_name }}"
  CI_REPO : "https://github.com/${{github.repository}}"

permissions:
  contents: read

jobs:
  icx-build:
    # TODO: we could merge ICX build with gcc/clang (using our dockers) Issue: #259
    name: Intel C++ Compiler
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [{c: icx, cxx: icpx}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
    runs-on: ubuntu-22.04
    container:
      image: intel/oneapi:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
      options: "--privileged"

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install apt packages
      run: |
        apt-get update
        apt-get install -y libnuma-dev libjemalloc-dev libtbb-dev libhwloc-dev

    - name: Configure build
      run: >
        cmake
        -B build
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}
        -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_LIBUMF_POOL_SCALABLE=ON
        -DUMF_BUILD_EXAMPLES=ON

    - name: Build UMF
      run: cmake --build build -j $(nproc)

    - name: Run tests
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure --test-dir test

    - name: Test make install
      # Run only when the example is built
      if: matrix.os_provider == 'ON' && matrix.pool_tracking == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_install.sh \
            ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}} ${{matrix.build_type}} ${{matrix.shared_library}}

    - name: Test make uninstall
      # Run only when the example is built
      if: matrix.os_provider == 'ON' && matrix.pool_tracking == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_uninstall.sh ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}}

  ubuntu-build:
    name: Ubuntu
    strategy:
      matrix:
        os: ['ubuntu-20.04', 'ubuntu-22.04']
        build_type: [Debug, Release]
        compiler: [{c: gcc, cxx: g++}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
        include:
          - os: 'ubuntu-20.04'
            build_type: Release
            compiler: {c: gcc-7, cxx: g++-7}
            shared_library: 'OFF'
            os_provider: 'ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: clang, cxx: clang++}
            shared_library: 'OFF'
            os_provider: 'ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'ON'
          - os: 'ubuntu-22.04'
            build_type: Debug
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'ON'
          # test os_provider='OFF' with shared_library='ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'OFF'
          # test os_provider='OFF' with shared_library='OFF'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'OFF'
            os_provider: 'OFF'
    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install apt packages
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake libhwloc-dev libnuma-dev libjemalloc-dev libtbb-dev

    - name: Install g++-7
      if: matrix.compiler.cxx == 'g++-7'
      run: sudo apt-get install -y ${{matrix.compiler.cxx}}

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}
        -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_LIBUMF_POOL_SCALABLE=ON

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} -j $(nproc)

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest --output-on-failure

    - name: Test make install
      # Run only when the example is built
      # TODO: Modify installation test to accept output varying with build options
      if: matrix.os_provider == 'ON' && matrix.pool_tracking == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_install.sh \
            ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}} ${{matrix.build_type}} ${{matrix.shared_library}}

    - name: Test make uninstall
      # Run only when the example is built
      # TODO: Modify installation test to accept output varying with build options
      if: matrix.os_provider == 'ON' && matrix.pool_tracking == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_uninstall.sh ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}}

  windows-build:
    name: Windows
    strategy:
      matrix:
        os: ['windows-2019', 'windows-2022']
        build_type: [Debug, Release]
        compiler: [{c: cl, cxx: cl}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
        include:
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: clang-cl, cxx: clang-cl}
            pool_tracking: 'ON'
            os_provider: 'ON'
            toolset: "-T ClangCL"
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            pool_tracking: 'ON'
            shared_library: 'ON'
            os_provider: 'ON'
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            pool_tracking: 'ON'
            shared_library: 'ON'
            os_provider: 'OFF'

    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        ${{matrix.toolset}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure

  macos-build:
    name: MacOS
    strategy:
      matrix:
        os: ['macos-12', 'macos-13']
    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install Python requirements
      run: python3 -m pip install -r third_party/requirements.txt

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_BUILD_TYPE=Release
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_ENABLE_POOL_TRACKING=ON

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} -j $(sysctl -n hw.logicalcpu)

  qemu-build:
    name: Qemu
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
    - name: install qemu
      run: |
        sudo apt update && sudo apt install -y qemu-system genisoimage qemu-utils
    - name: gen key
      run: ssh-keygen -b 4096 -N '' -f ~/.ssh/id_rsa
    - name: geniso
      run: |
        pub_key=$(cat ~/.ssh/id_rsa.pub)

        cat > user-data << EOF
        #cloud-config

        # Add a 'cxltest' user to the system with a password
        users:
          - default
          - name: cxltest
            gecos: CXL Test User
            primary_group: wheel
            groups: users
            sudo: ALL=(ALL) NOPASSWD:ALL
            lock_passwd: false
            ssh-authorized-keys:
              - $pub_key
            shell: /usr/bin/bash

        # Set local logins
        chpasswd:
          list: |
            root:password
            cxltest:password
          expire: False
        EOF

        cat > meta-data << EOF
        instance-id: cxl-test
        local-hostname: cxl-test
        EOF

        sudo -Sk genisoimage -output ubuntu-cloud-init.iso -volid cidata -joliet -rock ./user-data ./meta-data
    - name: download image
      run: wget https://cloud-images.ubuntu.com/lunar/current/lunar-server-cloudimg-amd64.img
    - name: resize image
      run: qemu-img resize ./lunar-server-cloudimg-amd64.img +4G
    - name: run qemu
      run: |
        sudo qemu-system-x86_64 \
        -drive file=./lunar-server-cloudimg-amd64.img,format=qcow2,index=0,media=disk,id=hd \
        -cdrom ./ubuntu-cloud-init.iso \
        -machine q35,usb=off,hmat=on \
        -enable-kvm \
        -net nic -net user,hostfwd=tcp::2222-:22 \
        -m 3G \
        -smp 4 \
        -object memory-backend-ram,size=1G,id=ram0 \
        -object memory-backend-ram,size=1G,id=ram1 \
        -object memory-backend-ram,size=1G,id=ram2 \
        -numa node,nodeid=0,memdev=ram0,cpus=0-1 \
        -numa node,nodeid=1,memdev=ram1,cpus=2-3 \
        -numa node,nodeid=2,memdev=ram2,initiator=0 \
        -numa dist,src=0,dst=0,val=10 \
        -numa dist,src=0,dst=1,val=20 \
        -numa dist,src=0,dst=2,val=17 \
        -numa dist,src=1,dst=0,val=20 \
        -numa dist,src=1,dst=1,val=10 \
        -numa dist,src=1,dst=2,val=28 \
        -numa dist,src=2,dst=0,val=17 \
        -numa dist,src=2,dst=1,val=28 \
        -numa dist,src=2,dst=2,val=10 \
        -numa hmat-lb,initiator=0,target=0,hierarchy=memory,data-type=access-latency,latency=10 \
        -numa hmat-lb,initiator=0,target=0,hierarchy=memory,data-type=access-bandwidth,bandwidth=10485760 \
        -numa hmat-lb,initiator=0,target=1,hierarchy=memory,data-type=access-latency,latency=20 \
        -numa hmat-lb,initiator=0,target=1,hierarchy=memory,data-type=access-bandwidth,bandwidth=5242880 \
        -numa hmat-lb,initiator=0,target=2,hierarchy=memory,data-type=access-latency,latency=16 \
        -numa hmat-lb,initiator=0,target=2,hierarchy=memory,data-type=access-bandwidth,bandwidth=1048576 \
        -numa hmat-lb,initiator=1,target=0,hierarchy=memory,data-type=access-latency,latency=20 \
        -numa hmat-lb,initiator=1,target=0,hierarchy=memory,data-type=access-bandwidth,bandwidth=5242880 \
        -numa hmat-lb,initiator=1,target=1,hierarchy=memory,data-type=access-latency,latency=10 \
        -numa hmat-lb,initiator=1,target=1,hierarchy=memory,data-type=access-bandwidth,bandwidth=10485760 \
        -numa hmat-lb,initiator=1,target=2,hierarchy=memory,data-type=access-latency,latency=27 \
        -numa hmat-lb,initiator=1,target=2,hierarchy=memory,data-type=access-bandwidth,bandwidth=1048576 \
        -daemonize -display none
    - name: ssh keyscan
      run: |
        set +e
        ssh-keyscan -p 2222 -H 127.0.0.1 >> ~/.ssh/known_hosts
        while [ $? -ne 0 ]
        do
          echo "Trying to connect..."
          ps -aux | grep qemu
          sleep 5
          ssh-keyscan -p 2222 -H 127.0.0.1 >> ~/.ssh/known_hosts
        done
    - name: ssh to qemu
      run: |
        scp -P 2222 ${{github.workspace}}/scripts/qemu/run-build.sh cxltest@127.0.0.1:/home/cxltest
        ssh cxltest@127.0.0.1 -p 2222 -t 'bash /home/cxltest/run-build.sh ${{env.CI_REPO}} ${{env.CI_BRANCH}}'
